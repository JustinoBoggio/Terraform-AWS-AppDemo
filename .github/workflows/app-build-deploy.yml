name: app-build-deploy (dev)

on:
  push:
    branches: [main]
    paths:
      - 'app/**'
      - '.github/workflows/app-build-deploy.yml'
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

concurrency:
  group: app-deploy-main
  cancel-in-progress: true

env:
  AWS_REGION: us-east-1
  NS: app

jobs:
  build_push_deploy:
    environment: dev
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS creds (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::215873709989:role/gha-app-dev
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get AWS account ID
        id: acct
        run: echo "id=$(aws sts get-caller-identity --query Account --output text)" >> "$GITHUB_OUTPUT"

      - name: Resolve & build/push images if missing
        id: images
        env:
          SHA: ${{ github.sha }}
          REG: ${{ env.AWS_REGION }}
        shell: bash
        run: |
          set -euo pipefail
          ACC="$(aws sts get-caller-identity --query Account --output text)"
          API_REPO="${ACC}.dkr.ecr.${REG}.amazonaws.com/app-api"
          WEB_REPO="${ACC}.dkr.ecr.${REG}.amazonaws.com/app-web"
          TAG="${SHA}"

          exists() {
            local repo="$1" name="$2"
            aws ecr describe-images \
              --repository-name "$name" \
              --image-ids imageTag="$TAG" \
              >/dev/null 2>&1
          }

          if exists "$API_REPO" "app-api"; then
            echo "API image $API_REPO:$TAG ya existe → skip build/push"
          else
            echo "API image $API_REPO:$TAG NO existe → build & push"
            docker build -t "$API_REPO:$TAG" app/api
            docker push "$API_REPO:$TAG"
          fi

          if exists "$WEB_REPO" "app-web"; then
            echo "WEB image $WEB_REPO:$TAG ya existe → skip build/push"
          else
            echo "WEB image $WEB_REPO:$TAG NO existe → build & push"
            docker build -t "$WEB_REPO:$TAG" app/web
            docker push "$WEB_REPO:$TAG"
          fi

          {
            echo "API_REPO=$API_REPO"
            echo "WEB_REPO=$WEB_REPO"
            echo "IMAGE_TAG=$TAG"
            echo "API_IMAGE=$API_REPO:$TAG"
            echo "WEB_IMAGE=$WEB_REPO:$TAG"
          } >> "$GITHUB_ENV"


      - name: Configure AWS creds (OIDC) for kubectl/helm
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::215873709989:role/gha-app-dev
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: gha-app-deploy

      - name: Install kubectl & helm
        shell: bash
        run: |
          set -euo pipefail
          K_VER="$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)"
          curl -sSLo /usr/local/bin/kubectl "https://storage.googleapis.com/kubernetes-release/release/${K_VER}/bin/linux/amd64/kubectl"
          chmod +x /usr/local/bin/kubectl
          curl -sSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name dev-eks --region "$AWS_REGION"

      - name: Deploy with Helm (api)
        shell: bash
        run: |
          set -euo pipefail
          helm upgrade --install app-api ./app/deploy/chart \
            --namespace "${NS}" --create-namespace \
            -f app/deploy/chart/values-api.yaml \
            --set image.repository="${API_REPO}" \
            --set image.tag="${IMAGE_TAG}" \
            --set pod.serviceAccountAnnotations."eks\.amazonaws\.com/role-arn"="${{ secrets.IRSA_ROLE_ARN_API }}"

      - name: Deploy with Helm (web)
        shell: bash
        run: |
          set -euo pipefail
          helm upgrade --install app-web ./app/deploy/chart \
            --namespace "${NS}" \
            -f app/deploy/chart/values-web.yaml \
            --set image.repository="${WEB_REPO}" \
            --set image.tag="${IMAGE_TAG}"
